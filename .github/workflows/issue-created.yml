name: Issue Created Workflow

on:
  issues:
    types:
      - opened

jobs:
  
  handle-issue:
    permissions:
      issues: write # Required to lock and close issues
    runs-on: ubuntu-latest
    name: 🧑‍💻 Auto issue handling

    steps:
      # - name: Checkout repository
      #   uses: actions/checkout@v3

      - name: ❌ Block unauthorized users
        if: github.event.issue.user.login != 'svrooij'
        run: |
          echo "This issue was not created by the authorized user."
          exit 1
        # You probably should not compare against a hardcoded username in a real-world scenario.
        # Instead, consider using a secret or an environment variable to store the authorized username.

      - name: 📝 Log issue details 
        run: |
          echo "Issue Title: ${{ github.event.issue.title }}"
          echo "Issue Body: ${{ github.event.issue.body }}"
          echo "Issue URL: ${{ github.event.issue.html_url }}"
          echo "Issue Author: ${{ github.event.issue.user.login }}"
          echo "Issue Created At: ${{ github.event.issue.created_at }}"
      
      # Parse the details from the issue body and set as output variables
      - name: 📜 Parse issue body
        id: parse_issue_body
        shell: pwsh
        run: |
          $issueBody = "${{ github.event.issue.body }}"
          $lines = $issueBody -split "\n" | ForEach-Object { $_.Trim() }
          $lines = $lines | Where-Object { $_ -ne "" } # Remove empty sections

          $sectionValues = @{}
          for ($i = 0; $i -lt $lines.Count; $i++) {
            # if line starts with ###, it is a section header
            if ($lines[$i].StartsWith("### ")) {
              $sectionName = $lines[$i].Remove(0,4).Trim().Replace(" ", "_").ToLower()
              $sectionValues[$sectionName] = ""
              $x = $i+1 # Move to the next line
              # Collect all lines until the next section header or end of array
              while ($x -lt $lines.Count -and $lines[$x] -notmatch "^### ") {
                # Append the line to the section value
                $sectionValues[$sectionName] += $lines[$x].Trim()
                $x++
              }
            }
          }

          if ($sectionValues.ContainsKey("select_the_admin_action")) {
            echo "action=${sectionValues["select_the_admin_action"]}" >> $GITHUB_ENV
          }
          
          if ($sectionValues.ContainsKey("user")) {
            echo "user=${sectionValues["user"]}" >> $GITHUB_ENV
          }

          if ($sectionValues.ContainsKey("reason_for_action")) {
            echo "reason=${sectionValues["reason_for_action"]}" >> $GITHUB_ENV
          }

      - name: 💬 Summarize details
        run: |
          echo "## 🚀 Performing admin action" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Action: **${{ steps.parse_issue_body.outputs.action }}**" >> $GITHUB_STEP_SUMMARY
          echo "- User: **${{ steps.parse_issue_body.outputs.user }}**" >> $GITHUB_STEP_SUMMARY
          echo "- Reason: ${{ steps.parse_issue_body.outputs.reason }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      # No need to install gh CLI, it is already available in the GitHub Actions environment.
      # - name: 📃 Install GitHub CLI
      #   run: sudo apt-get install -y gh
 
      - name: 🔒 Lock and close issue
        if: always()
        env:
          GH_TOKEN: ${{ github.token }}

        run: |
          echo "Closing issue..."
          gh issue close "${{ github.event.issue.number }}" --comment "Issue closed by workflow." --repo "${{ github.repository }}"
          echo "Locking issue..."
          gh issue lock "${{ github.event.issue.number }}" --reason "resolved" --repo "${{ github.repository }}"
