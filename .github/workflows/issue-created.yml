name: Issue Created Workflow

on:
  issues:
    types:
      - opened

jobs:
  
  handle-issue:
    permissions:
      issues: write # Required to lock and close issues
    runs-on: ubuntu-latest
    name: 🧑‍💻 Auto issue handling

    steps:
      # - name: Checkout repository
      #   uses: actions/checkout@v3

      - name: 🔑 Validate issue author
        # You probably should not compare against a hardcoded username in a real-world scenario.
        # Instead, consider using a secret or an environment variable to store the authorized username.
        run: |
          if [[ "${{ github.event.issue.user.login }}" != "svrooij" ]]; then
            echo "This issue was not created by the authorized user."
            exit 1
          fi

      - name: 📝 Log issue details 
        run: |
          echo "Issue Title: ${{ github.event.issue.title }}"
          echo "Issue Body: ${{ github.event.issue.body }}"
          echo "Issue URL: ${{ github.event.issue.html_url }}"
          echo "Issue Author: ${{ github.event.issue.user.login }}"
          echo "Issue Created At: ${{ github.event.issue.created_at }}"
      
      # Parse the details from the issue body and set as output variables
      - name: 📜 Parse issue body
        id: parse_issue_body
        shell: pwsh
        run: |
          $issueBody = "${{ github.event.issue.body }}"
          $sections = $issueBody -split "\n\n" | ForEach-Object { $_.Trim() }
          $sections = $sections | Where-Object { $_ -ne "" } # Remove empty sections

          $sectionValues = @{}
          foreach ($section in $sections) {
            $lines = $section -split "\n" | ForEach-Object { $_.Trim() }
            $sectionName = $lines[0].Replace("### ", "").Trim().ToLower()
            $sectionName = $sectionName -replace '[^a-zA-Z0-9_]', '_' # Remove special characters
            $sectionContent = $lines[1..($lines.Count - 1)] -join "`n"
            $sectionValues[$sectionName] = $sectionContent
          }

          if ($sectionValues.ContainsKey("select_the_admin_action")) {
            echo "action=${sectionValues["select_the_admin_action"]}" >> $GITHUB_ENV
          }
          
          if ($sectionValues.ContainsKey("user")) {
            echo "user=${sectionValues["user"]}" >> $GITHUB_ENV
          }

          if ($sectionValues.ContainsKey("reason_for_action")) {
            echo "reason=${sectionValues["reason_for_action"]}" >> $GITHUB_ENV
          }

      - name: 💬 Summarize details
        run: |
          echo "## 🚀 Performing admin action" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Action: `${{ steps.parse_issue_body.outputs.action }}`" >> $GITHUB_STEP_SUMMARY
          echo "- User: `${{ steps.parse_issue_body.outputs.user }}`" >> $GITHUB_STEP_SUMMARY
          echo "- Reason: `${{ steps.parse_issue_body.outputs.reason }}`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📝 Issue Details" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Body:" >> $GITHUB_STEP_SUMMARY
          echo "```md" >> $GITHUB_STEP_SUMMARY
          echo "${{ github.event.issue.body }}" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: 📃 Install GitHub CLI
        run: sudo apt-get install -y gh
 
      - name: 🔒 Lock and close issue

        run: |
          echo "Closing issue..."
          gh issue close "${{ github.event.issue.number }}" --comment "Issue closed by workflow." --repo "${{ github.repository }}"
          echo "Locking issue..."
          gh issue lock "${{ github.event.issue.number }}" --reason "resolved" --repo "${{ github.repository }}"
