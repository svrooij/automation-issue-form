name: Issue Created Workflow

on:
  issues:
    types:
      - opened

jobs:
  
  handle-issue:
    permissions:
      issues: write # Required to lock and close issues
      id-token: write # Required to use the ID token for Azure login
    runs-on: ubuntu-latest
    name: üßë‚Äçüíª Auto issue handling

    steps:
      # - name: Checkout repository
      #   uses: actions/checkout@v3

      - name: ‚ùå Block unauthorized users
        if: github.event.issue.user.login != 'svrooij'
        run: |
          echo "This issue was not created by the authorized user."
          echo "::error title=Unauthorized user::This issue was not created by the authorized user."
          exit 1
        # You probably should not compare against a hardcoded username in a real-world scenario.
        # Instead, consider using a secret or an environment variable to store the authorized username.

      - name: üìù Log issue details 
        run: |
          echo "Issue Title: ${{ github.event.issue.title }}"
          echo "Issue Body: ${{ github.event.issue.body }}"
          echo "Issue URL: ${{ github.event.issue.html_url }}"
          echo "Issue Author: ${{ github.event.issue.user.login }}"
          echo "Issue Created At: ${{ github.event.issue.created_at }}"
      
      # Parse the details from the issue body and set as output variables
      - name: üìú Parse issue body
        id: parse_issue_body
        shell: pwsh
        run: |
          $issueBody = "${{ github.event.issue.body }}"
          $lines = $issueBody -split "\n" | ForEach-Object { $_.Trim() }
          $lines = $lines | Where-Object { $_ -ne "" } # Remove empty sections

          $sectionValues = @{}
          for ($i = 0; $i -lt $lines.Count; $i++) {
            # if line starts with ###, it is a section header
            if ($lines[$i].StartsWith("### ")) {
              $sectionName = $lines[$i].Remove(0,4).Trim().Replace(" ", "_").ToLower()
              $sectionValues[$sectionName] = ""
              $x = $i+1 # Move to the next line
              # Collect all lines until the next section header or end of array
              while ($x -lt $lines.Count -and $lines[$x] -notmatch "^### ") {
                # Append the line to the section value
                $sectionValues[$sectionName] += $lines[$x].Trim()
                $x++
              }
            }
          }

          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "### üìú Issue Body Details`n- Issue: [#${{ github.event.issue.number }}](${{ github.event.issue.html_url }})"

          if ($sectionValues.ContainsKey("select_the_admin_action")) {
            Write-Host "Action: $($sectionValues.select_the_admin_action)"
            Add-Content -Path $env:GITHUB_OUTPUT -Value "action=$($sectionValues.select_the_admin_action)"
            Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "- Action: *$($sectionValues.select_the_admin_action)*"
          }
          
          if ($sectionValues.ContainsKey("user")) {
            Write-Host "User: $($sectionValues.user)"
            Add-Content -Path $env:GITHUB_OUTPUT -Value "user=$($sectionValues.user)"
            Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "- User: *$($sectionValues.user)*"
          }

          if ($sectionValues.ContainsKey("reason_for_action")) {
            Write-Host "Reason: $($sectionValues.reason_for_action)"
            Add-Content -Path $env:GITHUB_OUTPUT -Value "reason=$($sectionValues.reason_for_action)"
            Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "- Reason: *$($sectionValues.reason_for_action)*"
          }

      # No need to install gh CLI, it is already available in the GitHub Actions environment.
      # - name: üìÉ Install GitHub CLI
      #   run: sudo apt-get install -y gh

      - name: üßë‚Äçüíª Checkout scripts
        uses: actions/checkout@v4


      - uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          allow-no-subscriptions: true
          #enable-AzPSSession: true
      
      - name: ‚úÖ Execute script
        run: ./scripts/execute_action.ps1 -Action "${{ steps.parse_issue_body.outputs.action }}" -User "${{ steps.parse_issue_body.outputs.user }}"
        shell: pwsh
 
      - name: üîí Lock and close issue
        if: always()
        env:
          GH_TOKEN: ${{ github.token }}

        run: |
          COMMENT=$(cat <<-END
          Your requests has been [processed](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}).

          Details:
          - Action: *${{ steps.parse_issue_body.outputs.action }}*
          - User: *${{ steps.parse_issue_body.outputs.user }}*
          - Reason: ${{ steps.parse_issue_body.outputs.reason }}
          END
          )
          gh issue close "${{ github.event.issue.number }}" --comment "$COMMENT" --repo "${{ github.repository }}"
          gh issue lock "${{ github.event.issue.number }}" --reason "resolved" --repo "${{ github.repository }}"
